service: awsserverlessbloodbankmanagementsystem

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: [
        !GetAtt DynamoDBPatientTable.Arn,
        !GetAtt DynamoDBDonorTable.Arn
      ]
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup # Add this line for Cognito operation
      Resource: "*"
        


functions:
  AddPatient:
    handler: functions/Patient/AddNewPatient.handler
    events: 
      - http:
          path: /AddPatient
          method: POST
          # authorizer:
          #   name: WebCognitoUserPoolAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn: !GetAtt CognitoUserPool.Arn
  UpdatePatient:
    handler: functions/Patient/UpdatePatient.handler
    events:
      - http:
          path: /UpdatePatient/{id}
          method: POST
  DeletePatient:
    handler:  functions/Patient/DeletePatient.handler
    events:
      - http:
          path: /DeletePatient/{id}
          method: DELETE
  AllPatientsData:
    handler:  functions/Patient/ListOfAllPatient.handler
    events:
      - http:
          path: /AllPatientsData
          method: GET
  PostFunction:
    handler: functions/Patient/PostConfirmation.handler
    events:
      - cognitoUserPool:
          pool: us-east-1_SYkgZDH1r
          trigger: PostConfirmation
  AddDonor:
    handler: functions/Donor/AddNewDonor.handler
    events: 
      - http:
          path: /AddDonor
          method: POST
  UpdateDonor:
    handler: functions/Donor/UpdateDonor.handler
    events:
      - http:
          path: /UpdateDonor/{id}
          method: POST
  DeleteDonor:
    handler:  functions/Donor/DeleteDonor.handler
    events:
      - http:
          path: /DeleteDonor/{id}
          method: DELETE
  AllDonorsData:
    handler:  functions/Donor/ListOfAllDonor.handler
    events:
      - http:
          path: /AllDonorsData
          method: GET
  ReportOfDonor:
    handler: functions/Reports/ReportOfDonor.handler
    events: 
      - http:
          path: /ReportOfDonor/{id}
          method: GET
          # authorizer:
          #   name: WebCognitoUserPoolAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn: !GetAtt CognitoUserPool.Arn
  ReportOfPatient:
    handler: functions/Reports/ReportOfPatient.handler
    events:
      - http:
          path: /ReportOfPatient/{id}
          method: GET

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: BloodBankClientPool
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    CognitoUserPoolGroupPatient:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Group of Patients in Cognito"
        GroupName: "Patient"
        UserPoolId:
          Ref: CognitoUserPool #Refers to the user pool created above
    CognitoUserPoolGroupDonor:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Group of Donor in Cognito"
        GroupName: "Donor"
        UserPoolId:
          Ref: CognitoUserPool #Refers to the user pool created above
    DynamoDBPatientTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH 
    DynamoDBDonorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH 


